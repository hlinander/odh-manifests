apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyterhub-cfg
data:
  jupyterhub_config.py: |
    # Installera CAS-modulen

    import sys, subprocess
    subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'jhub_cas_authenticator'])

    # Konfigurera CAS

    CAS_BASE_URL = 'https://idp3.it.gu.se/idp/profile/cas'
    c.CASAuthenticator.cas_login_url = '%s/login' % CAS_BASE_URL
    c.CASAuthenticator.cas_logout_url = '%s/logout' % CAS_BASE_URL
    c.CASAuthenticator.cas_service_validate_url = '%s/serviceValidate' % CAS_BASE_URL
    c.CASAuthenticator.cas_service_url = 'https://%s/login' % host
    c.JupyterHub.authenticator_class = 'jhub_cas_authenticator.cas_auth.CASAuthenticator'

    # Tillåt inga oregistrerade användare att logga in. Kräver att
    # minst en administratör har angivits i fältet jupyterhub_admins i
    # ConfigMap:en jupyterhub-cfg. En tom lista innebär att vem som
    # helst får logga in.

    admin_users = os.environ.get('JUPYTERHUB_ADMIN_USERS')
    if admin_users:
      c.Authenticator.whitelist = set(admin_users.split(','))

    # Ta bort formuläret som visas när en notebook skapas

    delattr(OpenShiftSpawner, '_options_form_default')
    delattr(KubeSpawner, '_options_form_default')

    # Hårdkoda image

    c.KubeSpawner.image_spec = 's2i-minimal-notebook:v0.0.4'

    # Öppna Jupyter Lab isf filträdet

    c.KubeSpawner.default_url = '/lab'

    # Pre-spawn hook

    def _gu_custom_pre_spawn_hook(spawner):
      setup_environment(spawner)

      # Montera delad volym skrivskyddad för vanliga användare, och
      # skrivbar för administratörer

      readOnly = not spawner.user.admin
      # FIXA: Sök och lägg till om den inte finns.
      spawner.volumes = [dict(name='data', persistentVolumeClaim=dict(claimName=c.KubeSpawner.pvc_name_template))]
      spawner.volumes.append({
        'name': 'shared',
        'persistentVolumeClaim': {
          'claimName': '%s-shared' % os.environ['JUPYTERHUB_SERVICE_NAME'],
          'readOnly': readOnly
        }
      })
      spawner.volume_mounts = [dict(name='data', mountPath='/opt/app-root/src')]
      spawner.volume_mounts.append({
        'name': 'shared',
        'mountPath': '/opt/app-root/src/shared'
      })

      # Tillåt anpassning av resursanvändning via användarprofiler

      profile = spawner.single_user_profiles.get_user_profile_cm(spawner.user.name)
      last_selected_size = profile.get('last_selected_size', False)
      if not last_selected_size:
        last_selected_size = "Small"
        spawner.single_user_profiles.update_user_profile_cm(
          spawner.user.name,
          profile,
          'last_selected_size',
          last_selected_size
        )
      spawner.deployment_size = last_selected_size

    c.OpenShiftSpawner.pre_spawn_hook = _gu_custom_pre_spawn_hook

    # Installera Python-moduler på persistent lagring

    USER_SITE = '/opt/app-root/src/.local/lib/python3.6/site-packages'
    c.OpenShiftSpawner.environment.update({'PYTHONPATH': USER_SITE})
    c.OpenShiftSpawner.environment.update({'PIP_TARGET': USER_SITE})

  jupyterhub_admins: "c-xkindj,a-xschec,xliham"
  gpu_mode: ""
  singleuser_pvc_size: 2Gi
